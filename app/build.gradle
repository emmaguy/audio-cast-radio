apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'spoon'
apply plugin: 'io.fabric'

String readPropertyFromFile(propertyName, fileName) {
    Properties properties = new Properties()
    new File(fileName).withInputStream {
        properties.load(it)
    }
    return properties."$propertyName"
}

def gitCommitCount = "git rev-list HEAD --count".execute().text
def currentBranch = "git --git-dir=${rootDir}/.git --work-tree=${rootDir}/..rev-parse --abbrev-ref HEAD".execute().text.trim()

def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.emmaguy.audiocastradio"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode gitCommitCount.toInteger()
        versionName "1.0"

        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        ext.betaDistributionReleaseNotes = "Current branch: ${currentBranch}"

        testInstrumentationRunner "com.emmaguy.audiocastradio.AudioCastTestRunner"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        internal.java.srcDirs += 'src/internal/kotlin'
        production.java.srcDirs += 'src/production/kotlin'

        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    dexOptions {
        preDexLibraries = !'true'.equals(System.getenv('CI'))
    }
    productFlavors {
        internal {
            applicationId 'com.emmaguy.audiocastradio.internal'
        }
        production {
            resValue "string", "cast_app_id", readPropertyFromFile('castId', 'app/cast.properties')
        }
    }
    variantFilter { variant ->
        if (variant.getFlavors().get(0).name.equals('internal') && !variant.buildType.name.equals('debug')) {
            // we only need an 'internal' flavor when we're in debug
            variant.setIgnore(true);
        }
    }
}
spoon {
    adbTimeout = 60 // seconds
}

dependencies {
    // Ui
    compile "com.android.support:appcompat-v7:$support_library_version"
    compile "com.android.support:recyclerview-v7:$support_library_version"

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Google Cast
    compile "com.android.support:mediarouter-v7:$support_library_version"
    compile 'com.google.android.libraries.cast.companionlibrary:ccl:2.8.2'
    compile 'com.google.android.gms:play-services-cast:8.4.0'

    // RxJava
    compile 'io.reactivex:rxjava:1.1.2'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.jakewharton.rxrelay:rxrelay:1.0.0'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7-kotlin:0.4.0'

    // Logging
    compile 'com.jakewharton.timber:timber:4.1.0'

    // Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    // Unit tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.34-beta'

    // Espresso tests
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile("com.android.support.test.espresso:espresso-core:${espresso_version}") {
        exclude module: "espresso-idling-resource"
        exclude group: "com.android.support"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${espresso_version}") {
        exclude module: "espresso-core"
        exclude module: "recyclerview-v7"
        exclude group: "com.android.support"
    }
    androidTestCompile 'com.squareup.spoon:spoon-client:1.3.2'
}
buildscript {
    ext.kotlin_version = '1.0.1'
    ext.support_library_version = '23.2.1'
    ext.espresso_version = "2.2.2"
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}
repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$support_library_version"
}